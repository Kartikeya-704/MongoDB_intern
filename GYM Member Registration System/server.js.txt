const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();
const dbConfig = require('./config');

mongoose.connect(dbConfig.mongoURI);
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));
db.once('open', () => {
  console.log('MongoDB connected');
});

// UPDATED: Added membershipType and expiryDate to schema
const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true }, // Ensure username is unique
  password: { type: String, required: true },
  membershipType: { type: String, required: true },
  expiryDate: { type: Date, required: true }
});
const User = mongoose.model('User', userSchema);

app.use(bodyParser.urlencoded({ extended: true }));
// Use express.json() for handling JSON payloads if you add API calls for LLM in the future
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'))); // Serve static files from 'public' directory

// UPDATED: Handle new fields in signup
app.post('/signup', async (req, res) => {
  const { username, password, membershipType, expiryDate } = req.body;
  try {
    const user = new User({ username, password, membershipType, expiryDate });
    await user.save();
    console.log(`User ${username} registered successfully.`);
    res.redirect('/signup.html');
  } catch (err) {
    if (err.code === 11000) { // Duplicate key error (username already exists)
      return res.status(409).send('Username already exists. Please choose a different one.');
    }
    console.error('Error signing up user:', err);
    res.status(500).send('Error signing up user.');
  }
});

app.get('/users', async (req, res) => {
  try {
    const users = await User.find({});
    res.json(users);
  } catch (err) {
    console.error('Error retrieving users:', err);
    res.status(500).send('Error retrieving users.');
  }
});

// NEW: Delete User endpoint
app.delete('/users/:username', async (req, res) => {
  const { username } = req.params;
  try {
    const result = await User.deleteOne({ username: username });
    if (result.deletedCount === 0) {
      return res.status(404).json({ message: 'User not found.' });
    }
    console.log(`User ${username} deleted successfully.`);
    res.status(200).json({ message: `User ${username} deleted successfully.` });
  } catch (err) {
    console.error('Error deleting user:', err);
    res.status(500).send('Error deleting user.');
  }
});

// Ensure index.html is served for the root route
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Add route for signup.html explicitly if direct access is desired
app.get('/signup.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'signup.html'));
});

// Add route for members.html explicitly if direct access is desired
app.get('/members.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'members.html'));
});


app.listen(3000, () => console.log('Server started on http://localhost:3000'));